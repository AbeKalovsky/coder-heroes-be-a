# *******************************************
# ***DO NOT PLACE ANY SECRETS IN THIS FILE***
# *******************************************
# Instead, place any sensitive info in the file name application.properties

# Below are a list of env variables that you will need to properly run this application.
# Once you create your application-dev.properties file in the resources' directory, copy
# these env vars and paste them into that file
server.port=8080

####################
# Auth0 setup #
####################
#   In order to be able to run this application you will need to fill in the auth0.audience
#   and auth0.domain env vars. Currently, auth0.audience will work with a dummy input, but
#   you will need to enter a valid auth0.domain input which can be found in the CoderHeroes Product
#   Resources page which is pinned in the slack channel.
spring.security.oauth2.resource-server.jwt.issuer-uri=https://${auth0.domain}/
auth0.audience=dummy
auth0.domain=
allowed.origin=

####################
# PostgreSQL setup #
####################
spring.datasource.driverClassName=org.postgresql.Driver
#   In order to have this work on your local machine you will need to have postgresql installed
#   Uncomment out the lines below and make sure you have a database called coderheroes
#   In some cases username and password can be left blank, but may dependent on your OS
#spring.datasource.url=jdbc:postgresql://localhost:5432/coderheroes
#spring.datasource.username=
#spring.datasource.password=

#   Another solution is to pull down an image of postgres from docker.
#   There is a docker-compose.yml file in this directory that will pull down a docker postgres
#   image and allow you to use that. Make sure that you have docker installed on your local machine
#   and that it is running. Once docker is running, execute the following command in the terminal:
#       docker-compose -f docker-compose.yml up
#   You will know it's successful when you get a message saying "database system is ready to accept connections"
#   *Note: make sure you run the command in the directory that the docker-compose.yml file is in.*
spring.datasource.url=jdbc:postgresql://localhost:5432/testdb
spring.datasource.username=postgres
spring.datasource.password=postgres

####################
# JPA/Hibernate setup #
####################
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL10Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always