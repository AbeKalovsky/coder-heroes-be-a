# This will make the `dev` profile active by default when running the application
spring.profiles.active=dev

# *******************************************
# ***DO NOT PLACE ANY SECRETS IN THIS FILE***
# *******************************************
# Instead, place any sensitive info in the file name secrets.properties
spring.config.import=optional:secrets.properties

# Below are a list of env variables that you will need to properly run this application.
server.port=8080

###############
# Auth0 setup #
###############
#   In order to be able to run this application you will need to fill in the auth0.audience
#   and auth0.domain env vars. Currently, auth0.audience will work with a dummy input, but
#   you will need to enter a valid auth0.domain input which can be found in the CoderHeroes Product
#   Resources page which is pinned in the slack channel. You can add 'auth0.id=<valid id>' to the secrets.properties
spring.security.oauth2.resource-server.jwt.issuer-uri=https://${auth0.domain}/
auth0.audience=dummy
auth0.domain=dev-${auth0.id}.auth0.com
# Currently not used, but will be used in the future
#allowed.origin=

####################
# PostgreSQL setup #
####################
spring.datasource.driverClassName=org.postgresql.Driver
#   In order to have this work on your local machine you will need to have postgresql installed
#   Uncomment out the lines below and make sure you have a database called coderheroes
#   In some cases username and password can be left blank, but may dependent on your OS
#spring.datasource.url=jdbc:postgresql://localhost:5432/coderheroes

#   Another solution is to pull down an image of postgres from docker.
#   There is a docker-compose.yml file in this directory that will pull down a docker postgres
#   image and allow you to use that. Make sure that you have docker installed on your local machine
#   and that it is running. Once docker is running, execute the following command in the terminal:
#       docker-compose -f docker-compose.yml up
#   You will know it's successful when you get a message saying "database system is ready to accept connections"
#   *Note: make sure you run the command in the directory that the docker-compose.yml file is in.*
spring.datasource.url=jdbc:postgresql://localhost:5432/testdb
# In either case, you will need to add the username and password to the secrets.properties file
spring.datasource.username=${db.username}
spring.datasource.password=${db.password}

#######################
# JPA/Hibernate setup #
#######################
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always